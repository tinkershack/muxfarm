// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package plumber

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MopsClient is the client API for Mops service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MopsClient interface {
	// Ingest media for processing
	Ingest(ctx context.Context, in *MediaIn, opts ...grpc.CallOption) (*MuxfarmID, error)
	// Status of media associated with MID
	Pulse(ctx context.Context, in *MuxfarmID, opts ...grpc.CallOption) (Mops_PulseClient, error)
}

type mopsClient struct {
	cc grpc.ClientConnInterface
}

func NewMopsClient(cc grpc.ClientConnInterface) MopsClient {
	return &mopsClient{cc}
}

func (c *mopsClient) Ingest(ctx context.Context, in *MediaIn, opts ...grpc.CallOption) (*MuxfarmID, error) {
	out := new(MuxfarmID)
	err := c.cc.Invoke(ctx, "/plumber.Mops/Ingest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mopsClient) Pulse(ctx context.Context, in *MuxfarmID, opts ...grpc.CallOption) (Mops_PulseClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mops_ServiceDesc.Streams[0], "/plumber.Mops/Pulse", opts...)
	if err != nil {
		return nil, err
	}
	x := &mopsPulseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mops_PulseClient interface {
	Recv() (*MuxfarmObject, error)
	grpc.ClientStream
}

type mopsPulseClient struct {
	grpc.ClientStream
}

func (x *mopsPulseClient) Recv() (*MuxfarmObject, error) {
	m := new(MuxfarmObject)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MopsServer is the server API for Mops service.
// All implementations must embed UnimplementedMopsServer
// for forward compatibility
type MopsServer interface {
	// Ingest media for processing
	Ingest(context.Context, *MediaIn) (*MuxfarmID, error)
	// Status of media associated with MID
	Pulse(*MuxfarmID, Mops_PulseServer) error
	mustEmbedUnimplementedMopsServer()
}

// UnimplementedMopsServer must be embedded to have forward compatible implementations.
type UnimplementedMopsServer struct {
}

func (UnimplementedMopsServer) Ingest(context.Context, *MediaIn) (*MuxfarmID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ingest not implemented")
}
func (UnimplementedMopsServer) Pulse(*MuxfarmID, Mops_PulseServer) error {
	return status.Errorf(codes.Unimplemented, "method Pulse not implemented")
}
func (UnimplementedMopsServer) mustEmbedUnimplementedMopsServer() {}

// UnsafeMopsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MopsServer will
// result in compilation errors.
type UnsafeMopsServer interface {
	mustEmbedUnimplementedMopsServer()
}

func RegisterMopsServer(s grpc.ServiceRegistrar, srv MopsServer) {
	s.RegisterService(&Mops_ServiceDesc, srv)
}

func _Mops_Ingest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MopsServer).Ingest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plumber.Mops/Ingest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MopsServer).Ingest(ctx, req.(*MediaIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mops_Pulse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MuxfarmID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MopsServer).Pulse(m, &mopsPulseServer{stream})
}

type Mops_PulseServer interface {
	Send(*MuxfarmObject) error
	grpc.ServerStream
}

type mopsPulseServer struct {
	grpc.ServerStream
}

func (x *mopsPulseServer) Send(m *MuxfarmObject) error {
	return x.ServerStream.SendMsg(m)
}

// Mops_ServiceDesc is the grpc.ServiceDesc for Mops service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mops_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plumber.Mops",
	HandlerType: (*MopsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ingest",
			Handler:    _Mops_Ingest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pulse",
			Handler:       _Mops_Pulse_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plumber.proto",
}
