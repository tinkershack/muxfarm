// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package plumber

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MopsClient is the client API for Mops service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MopsClient interface {
	// Media In Media Out
	Mimo(ctx context.Context, in *MediaIn, opts ...grpc.CallOption) (Mops_MimoClient, error)
}

type mopsClient struct {
	cc grpc.ClientConnInterface
}

func NewMopsClient(cc grpc.ClientConnInterface) MopsClient {
	return &mopsClient{cc}
}

func (c *mopsClient) Mimo(ctx context.Context, in *MediaIn, opts ...grpc.CallOption) (Mops_MimoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mops_ServiceDesc.Streams[0], "/plumber.Mops/Mimo", opts...)
	if err != nil {
		return nil, err
	}
	x := &mopsMimoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mops_MimoClient interface {
	Recv() (*MediaOut, error)
	grpc.ClientStream
}

type mopsMimoClient struct {
	grpc.ClientStream
}

func (x *mopsMimoClient) Recv() (*MediaOut, error) {
	m := new(MediaOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MopsServer is the server API for Mops service.
// All implementations must embed UnimplementedMopsServer
// for forward compatibility
type MopsServer interface {
	// Media In Media Out
	Mimo(*MediaIn, Mops_MimoServer) error
	mustEmbedUnimplementedMopsServer()
}

// UnimplementedMopsServer must be embedded to have forward compatible implementations.
type UnimplementedMopsServer struct {
}

func (UnimplementedMopsServer) Mimo(*MediaIn, Mops_MimoServer) error {
	return status.Errorf(codes.Unimplemented, "method Mimo not implemented")
}
func (UnimplementedMopsServer) mustEmbedUnimplementedMopsServer() {}

// UnsafeMopsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MopsServer will
// result in compilation errors.
type UnsafeMopsServer interface {
	mustEmbedUnimplementedMopsServer()
}

func RegisterMopsServer(s grpc.ServiceRegistrar, srv MopsServer) {
	s.RegisterService(&Mops_ServiceDesc, srv)
}

func _Mops_Mimo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MediaIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MopsServer).Mimo(m, &mopsMimoServer{stream})
}

type Mops_MimoServer interface {
	Send(*MediaOut) error
	grpc.ServerStream
}

type mopsMimoServer struct {
	grpc.ServerStream
}

func (x *mopsMimoServer) Send(m *MediaOut) error {
	return x.ServerStream.SendMsg(m)
}

// Mops_ServiceDesc is the grpc.ServiceDesc for Mops service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mops_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plumber.Mops",
	HandlerType: (*MopsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Mimo",
			Handler:       _Mops_Mimo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plumbing.proto",
}
